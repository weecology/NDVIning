// Define some variables: 
//    buffer area around trapping plots, and start and end date
var buffersize = 1000; // size of buffer around trapping center points (m)
var startdate1 = '1984-01-01';
var enddate1 = '2011-12-31';
var startdate2 = '1999-01-01';
var enddate2 = '2020-12-31';
var startdate3 = '2013-01-01';
var enddate3 = '2020-12-31';

// define circle around Portal
var studyarea = ee.Geometry.Point([-109.080, 31.938]).buffer(buffersize); 
Map.addLayer(studyarea)


// function to calculate NDVI and add it to image as a band 
var addNDVI = function(image) {
  var ndvi = image.normalizedDifference(['B4', 'B3']).rename('NDVI');
  return image.addBands(ndvi);
};

// function to calculate NDVI and add it to image as a band 
var addNDVI_landsat8 = function(image) {
  var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
  return image.addBands(ndvi);
};

// function from Examples > Cloud Masking > Landsat457
var cloudMaskL457 = function(image) {
  var qa = image.select('pixel_qa');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
          .and(qa.bitwiseAnd(1 << 7))
          .or(qa.bitwiseAnd(1 << 3))
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};

// function to calculate mean ndvi of each image clipped to polygon
var getmeanndvi = function(image) {
  var reducers = ee.Reducer.mean().combine({
    reducer2: ee.Reducer.count(),
    sharedInputs: true
  });
  // Get a dictionary of means on the original image.
  var means = image.reduceRegion({
    reducer: reducers,
    geometry: studyarea,
    scale: 30});
  return ee.Feature(studyarea, means);
}

//Load Landsat5 collection: time section 1
var landsat5_time1 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
  .filterDate(startdate1, enddate1)
  .filterBounds(studyarea);

//Load Landsat7 collection: time section 2
var landsat7_time2 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
  .filterDate(startdate2, enddate2)
  .filterBounds(studyarea);

var landsat8_time3 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
  .filterDate(startdate3, enddate3)
  .filterBounds(studyarea);

// Apply cloud mask and ndvi functions to time section 1
var maskedcollection_time1 = landsat5_time1
  .map(cloudMaskL457)
  .map(addNDVI)
  .select('NDVI');

// Calculate mean ndvi per image
var studyareandvi_time1 = maskedcollection_time1.map(getmeanndvi);
// print output data to console so you can check it
print(studyareandvi_time1)

// Apply cloud mask and ndvi functions to time section 2
var maskedcollection_time2 = landsat7_time2
  .map(cloudMaskL457)
  .map(addNDVI)
  .select('NDVI');

// Calculate mean ndvi per image
var studyareandvi_time2 = maskedcollection_time2.map(getmeanndvi);

// Apply cloud mask and ndvi functions to time section 3
var maskedcollection_time3 = landsat8_time3
  .map(cloudMaskL457)
  .map(addNDVI_landsat8)
  .select('NDVI');

// Calculate mean ndvi per image
var studyareandvi_time3 = maskedcollection_time3.map(getmeanndvi);

// Export the results (to your google drive)
Export.table.toDrive({
  collection: studyareandvi_time1,
  description: 'Landsat5_SR_NDVI_Portal_1984_2011',
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: studyareandvi_time2,
  description: 'Landsat7_SR_NDVI_Portal_1999_2020',
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: studyareandvi_time3,
  description: 'Landsat8_SR_NDVI_Portal_2013_2020',
  fileFormat: 'CSV'
});
